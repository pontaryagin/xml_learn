// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "noteType.h"

namespace sample_ns
{
  // noteType
  //

  const noteType::to_type& noteType::
  to () const
  {
    return this->to_.get ();
  }

  noteType::to_type& noteType::
  to ()
  {
    return this->to_.get ();
  }

  void noteType::
  to (const to_type& x)
  {
    this->to_.set (x);
  }

  void noteType::
  to (::std::unique_ptr< to_type > x)
  {
    this->to_.set (std::move (x));
  }

  const noteType::from_type& noteType::
  from () const
  {
    return this->from_.get ();
  }

  noteType::from_type& noteType::
  from ()
  {
    return this->from_.get ();
  }

  void noteType::
  from (const from_type& x)
  {
    this->from_.set (x);
  }

  void noteType::
  from (::std::unique_ptr< from_type > x)
  {
    this->from_.set (std::move (x));
  }

  const noteType::heading_type& noteType::
  heading () const
  {
    return this->heading_.get ();
  }

  noteType::heading_type& noteType::
  heading ()
  {
    return this->heading_.get ();
  }

  void noteType::
  heading (const heading_type& x)
  {
    this->heading_.set (x);
  }

  void noteType::
  heading (::std::unique_ptr< heading_type > x)
  {
    this->heading_.set (std::move (x));
  }

  const noteType::body_type& noteType::
  body () const
  {
    return this->body_.get ();
  }

  noteType::body_type& noteType::
  body ()
  {
    return this->body_.get ();
  }

  void noteType::
  body (const body_type& x)
  {
    this->body_.set (x);
  }

  void noteType::
  body (::std::unique_ptr< body_type > x)
  {
    this->body_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace sample_ns
{
  // noteType
  //

  noteType::
  noteType (const to_type& to,
            const from_type& from,
            const heading_type& heading,
            const body_type& body)
  : ::xml_schema::type (),
    to_ (to, this),
    from_ (from, this),
    heading_ (heading, this),
    body_ (body, this)
  {
  }

  noteType::
  noteType (const noteType& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    to_ (x.to_, f, this),
    from_ (x.from_, f, this),
    heading_ (x.heading_, f, this),
    body_ (x.body_, f, this)
  {
  }

  noteType::
  noteType (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    to_ (this),
    from_ (this),
    heading_ (this),
    body_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void noteType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // to
      //
      if (n.name () == "to" && n.namespace_ () == "sample_ns")
      {
        ::std::unique_ptr< to_type > r (
          to_traits::create (i, f, this));

        if (!to_.present ())
        {
          this->to_.set (::std::move (r));
          continue;
        }
      }

      // from
      //
      if (n.name () == "from" && n.namespace_ () == "sample_ns")
      {
        ::std::unique_ptr< from_type > r (
          from_traits::create (i, f, this));

        if (!from_.present ())
        {
          this->from_.set (::std::move (r));
          continue;
        }
      }

      // heading
      //
      if (n.name () == "heading" && n.namespace_ () == "sample_ns")
      {
        ::std::unique_ptr< heading_type > r (
          heading_traits::create (i, f, this));

        if (!heading_.present ())
        {
          this->heading_.set (::std::move (r));
          continue;
        }
      }

      // body
      //
      if (n.name () == "body" && n.namespace_ () == "sample_ns")
      {
        ::std::unique_ptr< body_type > r (
          body_traits::create (i, f, this));

        if (!body_.present ())
        {
          this->body_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!to_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "to",
        "sample_ns");
    }

    if (!from_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "from",
        "sample_ns");
    }

    if (!heading_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "heading",
        "sample_ns");
    }

    if (!body_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "body",
        "sample_ns");
    }
  }

  noteType* noteType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class noteType (*this, f, c);
  }

  noteType& noteType::
  operator= (const noteType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->to_ = x.to_;
      this->from_ = x.from_;
      this->heading_ = x.heading_;
      this->body_ = x.body_;
    }

    return *this;
  }

  noteType::
  ~noteType ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace sample_ns
{
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

